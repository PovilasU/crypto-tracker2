import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchCount, fetchCoinInfo } from './counterAPI';
import axios from 'axios';
const initialState = {
  selectedCoin: '',
  value: 0,
  status: 'idle',
  coininfo: 'nothing',
  cointstatus: 'idle coinstatus',
  allcoins: '',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    // console.log('what is response1');
    // console.log(response);
    return response.data;
  }
);
// export const getCoinInfoAsyncOld = createAsyncThunk(
//   'counter/getCoinInfo',
//   async (dummyCoin) => {
//     const response = await fetchCoinInfo(dummyCoin);
//     // The value we return becomes the `fulfilled` action payload
//     //return response.data;
//     console.log('what is response');
//     console.log(response);
//     return response;
//   }
// );
export const getCoinInfoAsync = createAsyncThunk(
  'counter/getCoinInfo',
  async (coinId = 'bitcoin') => {
    const data = axios
      .get(`https://api.coincap.io/v2/assets/${coinId}`)
      .then((res) => {
        console.log('what is Coin info:');
        console.log(res);
        return res.data;
      });

    // const response = await client.get('/fakeApi/posts');
    console.log('getCoinInfoAsync response:');
    console.log(data);
    //  return data;
    // return response;
  }
);

export const getCoinsAsync = createAsyncThunk(
  'counter/getCoins',
  async (name = 'Bitcoin') => {
    const options = {
      method: 'GET',
      url: 'https://coinranking1.p.rapidapi.com/coins',
      headers: {
        'x-rapidapi-host': 'coinranking1.p.rapidapi.com',
        'x-rapidapi-key': 'a04a42f516msh9ddeba91e46f3ffp148a0fjsn2f56e34b16d1',
      },
    };

    const data = axios
      .request(options)
      .then(function (response) {
        console.log(response.data);
        return { allcoins: response.data.data, selectedCoin: name };
      })
      .catch(function (error) {
        console.error(error);
      });

    // const data1 = axios.get(`https://api.coincap.io/v2/assets`).then((res) => {
    //   console.log('what is res:');
    //   console.log(res);
    //   return res.data;
    // });

    // const response = await client.get('/fakeApi/posts');
    console.log('DATA response:');
    console.log(data);
    return data;
    // return response;
  }
);

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
    getCoinInfo: (state) => {
      //  state.value += action.payload;
      state.coininfo = 'test text';
    },
    //getCoinInfo,
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      })
      .addCase(getCoinInfoAsync.pending, (state) => {
        state.cointstatus = 'loading coin info';
      })
      .addCase(getCoinInfoAsync.fulfilled, (state, action) => {
        state.cointstatus = 'idle coin info';
        //state.coininfo = action.payload;
        console.log('action.payload');
        console.log(action.payload);
        console.log('action.payload getCoinInfoAsync.fulfilled end');
        state.coininfo = action.payload.data;
        console.log('action.payload getCoinInfoAsync end');
      })
      .addCase(getCoinsAsync.pending, (state) => {
        state.cointstatus = 'loading getcoins';
      })
      .addCase(getCoinsAsync.fulfilled, (state, action) => {
        state.cointstatus = 'idle getcoins';
        //state.coininfo = action.payload;
        console.log('Firing getCoinsAsync');
        console.log('action.payload');
        console.log(action.payload);
        state.allcoins = action.payload.allcoins;
        console.log('action.payload END');
        //  state.selectedCoin = action.payload.selectedCoin;
        //state.selectedCoin = action.payload.allcoins.coins[0];
        const index = action.payload.allcoins.coins.findIndex(
          (coin) => coin.name === action.payload.selectedCoin
        );
        state.selectedCoin = action.payload.allcoins.coins[index];
      });
  },
});

export const { increment, decrement, incrementByAmount, getCoinInfo } =
  counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.counter.value;
export const selectedCoin = (state) => state.counter.selectedCoin;
export const selectCoins = (state) => state.counter.allcoins.coins;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

export default counterSlice.reducer;
